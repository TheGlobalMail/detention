// Generated by CoffeeScript 1.6.2
var clean, excel, extractData, extractSpecificLocationIndex, file, fs, path, strip, util, _;

util = require("util");

excel = require('excel');

path = require('path');

fs = require('fs');

_ = require('lodash');

file = path.join(__dirname, 'data', 'detention_master.xlsx');

clean = function() {
  var extractor, header;
  header = 'INCIDENT NUMBER,DESCRIPTION,TYPE,DATE,';
  header += 'LOCATION,DETAILS,SPECIFIC LOCATION,PAGE,ROW';
  console.log(header);
  extractor = excel(file);
  return extractor.on('worksheet', extractData);
};

extractData = function(sheet) {
  var currentId, currentLocation, detailsCells, entryIndex, page;
  page = _.last(_.compact(sheet[0]));
  if (sheet[0][0].match(/INCIDENT NUMBER/i)) {
    return;
  }
  console.error("processing page: " + page);
  console.error(sheet[0].join(','));
  currentId = '';
  currentLocation = [];
  detailsCells = [];
  console.error("doing " + sheet.length);
  entryIndex = 0;
  return sheet.forEach(function(row) {
    var badId, cleanRow, date, description, details, id, location, match;
    currentId += strip(row[0]);
    detailsCells = detailsCells.concat(_.compact(_.map(row.slice(4), strip)));
    currentLocation = currentLocation.concat(strip(row[3]));
    if (currentId.match(/(1-[\dA-Z]+)/)) {
      entryIndex += 1;
      description = strip(row[1]);
      if (badId = currentId.match(/(1-[\dA-Z]+) (.*)/)) {
        id = badId[1];
        description = strip(badId[2]);
      } else {
        id = currentId;
      }
      match = row[3].match(/(.*)(\d\d\/\d+\/\d\d\d\d)(.*)/);
      if (!match) {
        match = row[3].match(/(.*)(\d\/\d+\/\d\d\d\d)(.*)/);
      }
      date = strip(match[2]);
      location = currentLocation.slice(0, -1);
      location = location.concat(_.compact(_.map([match[1], match[3]], strip)));
      location = _.compact(location).join(' ');
      details = detailsCells.join(' ').slice(0, -1);
      cleanRow = [id, description, strip(row[2]), date, location, details, _.last(detailsCells), page || '', entryIndex.toString()];
      cleanRow = _.map(cleanRow, function(cell) {
        return '"' + cell.replace(/"/g, '""') + '"';
      });
      console.log(cleanRow.join(','));
      currentId = '';
      currentLocation = [];
      return detailsCells = [];
    }
  });
};

strip = function(string) {
  if (string) {
    return string.replace(/^\s+|\s+$/mg, '');
  } else {
    return '';
  }
};

extractSpecificLocationIndex = function(sheet) {
  var index;
  if (!sheet[1]) {
    return;
  }
  index = null;
  _.detect(sheet.slice(1), function(row) {
    if (row[row.length - 1].match(/\w/)) {
      return index = row.length - 1;
    } else if (row[row.length - 2].match(/\w/)) {
      return index = row.length - 1;
    } else {
      return false;
    }
  });
  return index;
};

clean();
